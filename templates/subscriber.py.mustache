from cyclonedds.domain import DomainParticipant
from cyclonedds.core import Qos, Policy
from cyclonedds.sub import DataReader
from cyclonedds.pub import DataWriter
from cyclonedds.topic import Topic
import time
import logging
import traceback
import os

{{#message_imports}}
from {{package}} import {{name}}
{{/message_imports}}

from src.mapper import *

{{#proxy_import}}
from {{package}} import {{name}}
{{/proxy_import}}


logging.basicConfig(level=logging.INFO)


dp = DomainParticipant()

{{#topics}}
# Extension: Reliable execution through diversity. Changes the topic name via an environment variable to inject a voter for DDS messages.
topic{{name}} = Topic(dp, os.environ.get("{{name}}Topic".upper(), "{{name}}Topic").strip(), {{msg_type}}, qos=Qos(Policy.Reliability.Reliable(0)))
{{/topics}}


{{#data_reader}}
dr{{name}} = DataReader(dp, topic{{topic_name}})
{{/data_reader}}

{{#data_writer}}
dw{{name}} = DataWriter(dp, topic{{topic_name}})
{{/data_writer}}


{{#apply_funcs}}
def apply_{{name}}({{data_name}} : {{data_type}}):
    {{msg_name}} : {{msg_type}} = map_{{data_type}}_to_{{msg_type}}({{data_name}})
    #logging.info("Send Message " + str({{msg_name}}))
    dw{{name}}.write({{msg_name}})
{{/apply_funcs}}



proxy = {{proxy_name}}()

{{#proxy_callbacks}}
proxy.set_{{name}}_callback(apply_{{name}})
{{/proxy_callbacks}}


logging.info('Started')

while True:
    proxy.tick(1)
    {{#read_messages}}
    for {{msg_name}} in dr{{name}}.take(10):
        #logging.info("Recv Message " + str({{msg_name}}))
        try:
            {{data_name}} : {{data_type}} = map_{{msg_type}}_to_{{data_type}}({{msg_name}})
            proxy.apply_{{name}}({{data_name}} = {{data_name}})
        except Exception as e:
            logging.error("Cannot map or apply")
            logging.error(traceback.format_exc())

    {{/read_messages}}
    time.sleep(1)
